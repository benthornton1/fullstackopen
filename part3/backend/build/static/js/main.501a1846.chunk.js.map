{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","updatedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gPAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,mBAAqB,iBAC3B,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCgBjC,EArBA,WACX,IAAMK,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAChBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEf,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAdV,aAcwBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAnBJ,aAmBI,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCP9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKjB,UAAU,SACViB,IC4EEC,G,MA/EH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAEKpB,MAAK,SAAAqB,GACFT,EAASS,QAEd,IAEP,IAyCMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAApC,GAAI,OAAIA,EAAKG,aAEhC,OACE,6BACM,qCACA,kBAAC,EAAD,CAAckB,QAASS,IACvB,4BACKK,EAAYE,KAAI,SAAArC,GAAI,OACjB,kBAAC,EAAD,CAAMsC,IAAKtC,EAAKW,GAAIX,KAAMA,EAAMC,iBAAkB,kBAlCvC,SAACU,GACxB,IAAMX,EAAOwB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAChC8B,EAAW,2BAAQzC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD8B,EACYtB,EAAI8B,GACX5B,MAAK,SAAA6B,GACFjB,EAASD,EAAMa,KAAI,SAAArC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAO0C,SAEtDC,OAAM,SAAAC,GACHb,EAAgB,aAAD,OACE/B,EAAKK,QADP,0CAGfwC,YAAW,WACPd,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAE7B,KAAOA,SAkBwBmC,CAAmB9C,EAAKW,WAGxF,6BACI,4BAAQL,QAAS,kBAAMuB,GAAYD,KAAnC,QAAmDA,EAAU,YAAY,QAE7E,0BAAMmB,SAzDE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf7C,QAASqB,EACTd,MAAM,IAAIuC,MAAOC,cACjBjD,UAAWkD,KAAKC,SAAW,GAC3B3C,GAAIa,EAAM+B,OAAS,GAGvBtB,EACYiB,GACPrC,MAAK,SAAAa,GACFD,EAASD,EAAMR,OAAOU,IACtBC,EAAW,SA6CX,2BAAO6B,MAAO9B,EAAS+B,SArBV,SAACT,GACtBrB,EAAWqB,EAAMU,OAAOF,UAqBhB,4BAAQG,KAAK,UAAb,YC3EhBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.501a1846.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make unimportant' : 'make important'\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className='error'>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport './index.css'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n        }, [])\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1,\n        }\n        \n        noteService\n            .create(noteObject)\n            .then(newNote => {\n                setNotes(notes.concat(newNote))\n                setNewNote('')\n            })\n    }\n    \n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n        \n        noteService\n            .update(id, changedNote)\n            .then(updatedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : updatedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `the note '${note.content}' was already deleted from the server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    return (\n      <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <ul>\n                {notesToShow.map(note => \n                    <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n                )}\n            </ul>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>show {showAll ? 'important':'all'}</button>\n            </div>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange} />\n                <button type=\"submit\">save</button>\n            </form>\n      </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}